using System;
using System.Collections.Generic;

public class Graph
{
    private int V;
    private Dictionary<int, List<(int, int)>> graph;

    public Graph(int vertices)
    {
        V = vertices;
        graph = new Dictionary<int, List<(int, int)>>();
    }

    public void AddEdge(int u, int v, int capacity)
    {
        if (!graph.ContainsKey(u))
            graph[u] = new List<(int, int)>();
        
        graph[u].Add((v, capacity));
        
        if (!graph.ContainsKey(v))
            graph[v] = new List<(int, int)>();
        
        graph[v].Add((u, 0));  // Реверсивное ребро с нулевой пропускной способностью
    }

    private bool Bfs(int source, int sink, int[] parent)
    {
        bool[] visited = new bool[V];
        Queue<int> queue = new Queue<int>();
        queue.Enqueue(source);
        visited[source] = true;

        while (queue.Count > 0)
        {
            int u = queue.Dequeue();
            foreach ((int v, int capacity) in graph[u])
            {
                if (!visited[v] && capacity > 0)
                {
                    parent[v] = u;
                    if (v == sink)
                        return true;
                    queue.Enqueue(v);
                    visited[v] = true;
                }
            }
        }
        return false;
    }

    public int FordFulkerson(int source, int sink)
    {
        int[] parent = new int[V];
        int maxFlow = 0;

        while (Bfs(source, sink, parent))
        {
            int pathFlow = int.MaxValue;
            int s = sink;
            while (s != source)
            {
                foreach ((int v, int capacity) in graph[parent[s]])
                {
                    if (v == s)
                        pathFlow = Math.Min(pathFlow, capacity);
                }
                s = parent[s];
            }
            maxFlow += pathFlow;
            
            int v = sink;
            while (v != source)
            {
                int u = parent[v];
                foreach ((_, int capacity) in graph[u])
                {
                    if (capacity > 0)
                        --capacity;
                }
                foreach ((int _, int capacity) in graph[v])
                {
                    if (capacity > 0)
                        ++capacity;
                }
                v = parent[v];
            }
        }
        return maxFlow;
    }
}

// Пример использования
class Program
{
    static void Main(string[] args)
    {
        Graph g = new Graph(9);  // Количество вершин
        var edges = new (int, int, int)[] {
            (1, 3, 95), (1, 2, 32), (2, 5, 23), (2, 8, 16),
            (3, 4, 75), (3, 6, 6), (4, 5, 57), (4, 6, 9),
            (5, 6, 24), (5, 7, 20), (5, 8, 94), (6, 7, 7), (7, 8, 81)
        };

        foreach ((int u, int v, int cap) in edges)
            g.AddEdge(u, v, cap);

        int source = 1, sink = 8;
        Console.WriteLine($"Максимальный поток: {g.FordFulkerson(source, sink)}");
    }
}
